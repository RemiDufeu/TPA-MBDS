ifelse(puissance >  200 & nbportes == 3,"sportive",
ifelse(nbplaces > 5 | (puissance <=200 & longueur %in% c("longue","moyenne","très longue")) ,"familiale",
ifelse(longueur %in% c("longue","moyenne","très longue") & puissance > 200,"confort",
"indefini")))))
View(clientImmat)
nrow(subset(immatriculation,categorie == "citadine")) # 1958 citadine
View(immatriculation)
nrow(subset(clientImmat,categorie == "citadine")) # 1958 citadine
nrow(subset(clientImmat,categorie == "sportive")) # 0 sportives
nrow(subset(clientImmat,categorie == "familiale")) # 1540 familiale
nrow(subset(clientImmat,categorie == "confort")) # 1502 confort
View(clients)
clients <- dbGetQuery(hiveDB,"select
clients_h_ext.clientid as id,
clients_h_ext.age as age,
clients_h_ext.sexe as sexe,
clients_h_ext.taux as taux,
clients_h_ext.situation_familiale as situation_familiale,
clients_h_ext.nbr_enfant as nbr_enfant,
clients_h_ext.voiture_2 as voiture_2,
clients_h_ext.immatriculation as immatriculation
from clients_h_ext")
clientImmat <- dbGetQuery(hiveDB,"select
clients_h_ext.clientid as id,
clients_h_ext.age as age,
clients_h_ext.sexe as sexe,
clients_h_ext.taux as taux,
clients_h_ext.situation_familiale as situation_familiale,
clients_h_ext.nbr_enfant as nbr_enfant,
clients_h_ext.voiture_2 as voiture_2,
clients_h_ext.immatriculation as immatriculation,
immatriculation_h_ext.marque as marque,
immatriculation_h_ext.nom as nom,
immatriculation_h_ext.puissance as puissance,
immatriculation_h_ext.longueur as longueur,
immatriculation_h_ext.nbplaces as nbplaces,
immatriculation_h_ext.nbportes as nbportes,
immatriculation_h_ext.couleur as couleur,
immatriculation_h_ext.occasion as occasion,
immatriculation_h_ext.prix as prix
from clients_h_ext inner join immatriculation_h_ext
on clients_h_ext.immatriculation = immatriculation_h_ext.immatriculation")
View(clientImmat)
clientImmat$longueur <- with(clientImmat,ifelse(longueur == 'tr',"très longue",longueur))
clientImmat$categorie <- with(clientImmat,
ifelse(puissance <=  150 & longueur %in% c("courte","moyenne"), "citadine",
ifelse(puissance >  200 & nbportes == 3,"sportive",
ifelse(nbplaces > 5 | (puissance <=200 & longueur %in% c("longue","moyenne","très longue")) ,"familiale",
ifelse(longueur %in% c("longue","moyenne","très longue") & puissance > 200,"confort",
"indefini")))))
nrow(subset(clientImmat,categorie == "citadine")) # 1922 citadine
nrow(subset(clientImmat,categorie == "sportive")) # 0 sportives
nrow(subset(clientImmat,categorie == "familiale")) # 1529 familiale
nrow(subset(clientImmat,categorie == "confort")) # 1503 confort
nrow(subset(clientImmat,categorie == "indefini")) # 0 indéfini
View(clientImmat)
clientCat <- clientImmat[,!names(clientImmat) %in%
c("immatriculation", "marque", "nom","puissance","longueur","nbplaces","nbportes","couleur","occasion","prix")]
View(clientCat)
clientCat_EA <- clientCat[1:1400,]
clientCat_ET <- clientCat[1401:2000,]
install.packages("rpart")
install.packages("C50")
install.packages("tree")
# Activation des librairies
library(rpart)
library(C50)
library(tree)
? rpart()
tree_rp1 <- rpart(clientCat~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
tree_rp1 <- rpart(Produit~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
View(clientCat)
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
plot(tree_rp1)
text(tree_rp1, pretty = 0)
tree_rp2 <- rpart(clientCat~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
View(clientCat)
tree_rp2 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
plot(tree_rp2)
text(tree_rp2, pretty = 0)
clientCat_EA <- clientCat[1:1400,]
View(clientCat_EA)
clientCat <- clientImmat[,!names(clientImmat) %in%
c("id","immatriculation", "marque", "nom","puissance","longueur","nbplaces","nbportes","couleur","occasion","prix")]
clientCat_EA <- clientCat[1:1400,]
clientCat_ET <- clientCat[1401:2000,]
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
plot(tree_rp1)
text(tree_rp1, pretty = 0)
tree_rp2 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
plot(tree_rp2)
text(tree_rp2, pretty = 0)
tree_rp2 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
plot(tree_rp2)
text(tree_rp2, pretty = 0)
tree_rp2 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
plot(tree_rp2)
text(tree_rp2, pretty = 0)
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
plot(tree_rp1)
text(tree_rp1, pretty = 0)
tree_rp3 <- rpart(categorie~., clientCat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 10))
plot(tree_rp3)
text(tree_rp3, pretty = 0)
# Selection d'attribut par Coefficient de Gini et effectif minimal d'un noeud de 5
tree_rp2 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
plot(tree_rp2)
text(tree_rp2, pretty = 0)
# Selection d'attribut par Information Gain et effectif minimal d'un noeud de 5
tree_rp4 <- rpart(Produit~., produit_EA, parms = list(split = "information"), control = rpart.control(minbucket = 5))
# Selection d'attribut par Information Gain et effectif minimal d'un noeud de 5
tree_rp4 <- rpart(Produit~., produit_EA, parms = list(split = "information"), control = rpart.control(minbucket = 5))
# Selection d'attribut par Coefficient de Gini et effectif minimal d'un noeud de 10
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
plot(tree_rp1)
text(tree_rp1, pretty = 0)
# Selection d'attribut par Coefficient de Gini et effectif minimal d'un noeud de 5
tree_rp2 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
plot(tree_rp2)
text(tree_rp2, pretty = 0)
# Application de tree_rp1 (identique a tree_rp2) a l'ensemble de test
test_rp1 <- predict(tree_rp1, produit_ET, type="class")
# Application de tree_rp1 (identique a tree_rp2) a l'ensemble de test
test_rp1 <- predict(tree_rp1, clientCat_ET, type="class")
print(taux_rp1 <- nrow(clientCat_ET[clientCat_ET$categorie==test_rp1,])/nrow(produit_ET))
print(taux_rp1 <- nrow(clientCat_ET[clientCat_ET$categorie==test_rp1,])/nrow(clientCat_ET))
# Selection d'attribut par Coefficient de Gini et effectif minimal d'un noeud de 10
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
plot(tree_rp1)
text(tree_rp1, pretty = 0)
# Selection d'attribut par Coefficient de Gini et effectif minimal d'un noeud de 5
tree_rp2 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
plot(tree_rp2)
text(tree_rp2, pretty = 0)
# Selection d'attribut par Information Gain et effectif minimal d'un noeud de 10
tree_rp3 <- rpart(categorie~., clientCat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 10))
plot(tree_rp3)
text(tree_rp3, pretty = 0)
ee_rp3, pretty = 0)
print(taux_rp3 <- nrow(clientCat_ET[clientCat_ET$categorie==test_rp3,])/nrow(clientCat_ET))
# Application de tree3 (identique a tree_rp4) a l'ensemble de test
test_rp3 <- predict(tree_rp3, clientCat_ET, type="class")
# Calcul du taux de succes : nombre de succes sur nombre total d'exemples de test
print(taux_rp3 <- nrow(clientCat_ET[clientCat_ET$categorie==test_rp3,])/nrow(clientCat_ET))
# Application de tree3 (identique a tree_rp4) a l'ensemble de test
test_rp3 <- predict(tree_rp3, clientCat_ET, type="class")
# Calcul du taux de succes : nombre de succes sur nombre total d'exemples de test
print(taux_rp3 <- nrow(clientCat_ET[clientCat_ET$categorie==test_rp3,])/nrow(clientCat_ET))
tree_C51 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = T))
tree_C51 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = T))
clientCat_EA$categorie<-as.factor(clientCat_EA$categorie)
View(clientCat_EA)
clientCat_ET$categorie<-as.factor(clientCat_ET$categorie)
tree_C51 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = T))
plot(tree_C51, type="simple")
# Apprentissage 2nd parametrage pour C5.0
tree_C52 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = F))
plot(tree_C52, type="simple")
# Apprentissage 3eme parametrage pour C5.0
tree_C53 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = T))
plot(tree_C53, type="simple")
# Apprentissage 4eme param�parametrage pour C5.0
tree_C54 <- C5.0(categorie~., produit_EA, control = C5.0Control(minCases = 5, noGlobalPruning = F))
# Apprentissage 4eme param�parametrage pour C5.0
tree_C54 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = F))
plot(tree_C54, type="simple")
# Test et taux de succes pour le 1er param�trage pour C5.0()
test_C51 <- predict(tree_C51, clientCat_ET, type="class")
print(taux_C51 <- nrow(clientCat_ET[clientCat_ET$Produit==test_C51,])/nrow(clientCat_ET))
# Test et taux de succes pour le 2nd param�trage pour C5.0()
test_C52 <- predict(tree_C52, clientCat_ET, type="class")
print(taux_C52 <- nrow(clientCat_ET[clientCat_ET$Produit==test_C52,])/nrow(clientCat_ET))
# Test et taux de succes pour le 3eme param�trage pour C5.0()
test_C53 <- predict(tree_C53, clientCat_ET, type="class")
print(taux_C53 <- nrow(clientCat_ET[clientCat_ET$Produit==test_C53,])/nrow(clientCat_ET))
# Test et taux de succes pour le 4eme param�trage pour C5.0()
test_C54 <- predict(tree_C54, clientCat_ET, type="class")
print(taux_C54 <- nrow(clientCat_ET[clientCat_ET$Produit==test_C54,])/nrow(clientCat_ET))
? tree()
test_C51 <- predict(tree_C51, clientCat_ET, type="class")
print(taux_C51 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C51,])/nrow(clientCat_ET))
# Test et taux de succes pour le 2nd param�trage pour C5.0()
test_C52 <- predict(tree_C52, clientCat_ET, type="class")
print(taux_C52 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C52,])/nrow(clientCat_ET))
# Test et taux de succes pour le 3eme param�trage pour C5.0()
test_C53 <- predict(tree_C53, clientCat_ET, type="class")
print(taux_C53 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C53,])/nrow(clientCat_ET))
# Test et taux de succes pour le 4eme param�trage pour C5.0()
test_C54 <- predict(tree_C54, clientCat_ET, type="class")
print(taux_C54 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C54,])/nrow(clientCat_ET))
# Apprentissage 1er parametrage pour tree()
tree_tr1 <- tree(categorie~., clientCat_EA, split = "deviance", control = tree.control(nrow(clientCat_EA), mincut = 10))
plot(tree_tr1)
text(tree_tr1, pretty = 0)
# Apprentissage 2nd parametrage pour tree()
tree_tr2 <- tree(categorie~., clientCat_EA, split = "deviance", control = tree.control(nrow(clientCat_EA), mincut = 5))
plot(tree_tr2)
text(tree_tr2, pretty = 0)
# Apprentissage 3eme parametrage pour tree()
tree_tr3 <- tree(categorie~., clientCat_EA, split = "gini", control = tree.control(nrow(clientCat_EA), mincut = 1))
# Apprentissage 4eme parametrage pour tree()
tree_tr4 <- tree(categorie~., clientCat_EA, split = "gini", control = tree.control(nrow(clientCat_EA), mincut = 5))
# Test et taux de succes pour le 1er param�trage pour tree()
test_tr1 <- predict(tree_tr1, clientCat_ET, type="class")
print(taux_tr1 <- nrow(clientCat_ET[clientCat_ET$categorie==test_tr1,])/nrow(clientCat_ET))
# Test et taux de succes pour le 2nd param�trage pour tree()
test_tr2 <- predict(tree_tr2, clientCat_ET, type="class")
print(taux_tr2 <- nrow(clientCat_ET[clientCat_ET$categorie==test_tr2,])/nrow(clientCat_ET))
# Test et taux de succes pour le 3eme param�trage pour tree()
test_tr3 <- predict(tree_tr3, clientCat_ET, type="class")
# Test et taux de succes pour le 3eme param�trage pour tree()
test_tr3 <- predict(tree_tr3, clientCat_ET, type="class")
tree_tr3 <- tree(categorie~., clientCat_EA, split = "gini", control = tree.control(nrow(clientCat_EA), mincut = 1))
# Apprentissage 4eme parametrage pour tree()
tree_tr4 <- tree(categorie~., clientCat_EA, split = "gini", control = tree.control(nrow(clientCat_EA), mincut = 5))
# Test et taux de succes pour le 3eme param�trage pour tree()
test_tr3 <- predict(tree_tr3, clientCat_ET, type="class")
# Test et taux de succes pour le 3eme param�trage pour tree()
test_tr3 <- predict(tree_tr3, clientCat_ET, type="class")
# Apprentissage 3eme parametrage pour tree()
tree_tr3 <- tree(categorie~., clientCat_EA, split = "gini", control = tree.control(nrow(clientCat_EA), mincut = 1))
View(hiveDB)
View(clientCat_EA)
View(clientCat_ET)
clientCat_EA$sexe<-as.factor(clientCat_EA$sexe)
clientCat_ET$sexe<-as.factor(clientCat_ET$sexe)
? randomForest()
install.packages("randomForest")
library(randomForest)
? randomForest()
rf1 <- randomForest(categorie~., produit_QF_EA, ntree = 300, mtry = 3)
rf1 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 3)
rf1 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 3)
rf2 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 5)
rf3 <- randomForest(categorie~., clientCat_EA, ntree = 500, mtry = 3)
rf4 <- randomForest(categorie~., clientCat_EA, ntree = 500, mtry = 5)
# Test des classifeurs
rf1_class <- predict(rf1,clientCat_ET, type="response")
rf2_class <- predict(rf2,clientCat_ET, type="response")
rf3_class <- predict(rf3,clientCat_ET, type="response")
rf4_class <- predict(rf4,clientCat_ET, type="response")
print(table(clientCat_ET$categorie, rf1_class))
# Test des classifeurs : probabilites pour chaque prediction
rf1_prob <- predict(rf1, clientCat_ET, type="prob")
# Test des classifeurs : probabilites pour chaque prediction
rf1_prob <- predict(rf1, clientCat_ET, type="prob")
rf2_prob <- predict(rf2, clientCat_ET, type="prob")
rf3_prob <- predict(rf3, clientCat_ET, type="prob")
rf4_prob <- predict(rf4, clientCat_ET, type="prob")
rf1_pred <- prediction(rf1_prob[,2], clientCat_ET$categorie)
install.packages("ROCR")
library(ROCR)
# Courbe ROC
rf1_pred <- prediction(rf1_prob[,2], clientCat_ET$categorie)
rf1_prob <- predict(rf1, clientCat_ET, type="prob")
View(rf1_prob)
print(rf1_prob[,2])
View(rf1_prob)
print(taux_rf1 <- nrow(clientCat_ET[clientCat_ET$categorie==rf1_class,])/nrow(clientCat_ET))
print(taux_rf2 <- nrow(clientCat_ET[clientCat_ET$categorie==rf2_class,])/nrow(clientCat_ET))
print(taux_rf3 <- nrow(clientCat_ET[clientCat_ET$categorie==rf3_class,])/nrow(clientCat_ET))
print(taux_rf4 <- nrow(clientCat_ET[clientCat_ET$categorie==rf4_class,])/nrow(clientCat_ET))
install.packages("kknn")
library(kknn)
knn1 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 1)
knn1 <- knn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 1)
? kknn()
knn1 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 1)
knn1 <- kknn(categorie~., clientCat_EA, clientCat_ET)
View(hiveDB)
View(clientCat_EA)
clientCat_EA$situation_familiale<-as.factor(clientCat_EA$situation_familiale)
clientCat_ET$situation_familiale<-as.factor(clientCat_ET$situation_familiale)
clientCat_EA$voiture_2<-as.factor(clientCat_EA$voiture_2)
clientCat_ET$voiture_2<-as.factor(clientCat_ET$voiture_2)
rf1 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 3)
rf2 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 5)
rf3 <- randomForest(categorie~., clientCat_EA, ntree = 500, mtry = 3)
rf4 <- randomForest(categorie~., clientCat_EA, ntree = 500, mtry = 5)
rf1_class <- predict(rf1,clientCat_ET, type="response")
clientCat_EA$voiture_2<-as.factor(clientCat_EA$voiture_2)
clientCat_ET$voiture_2<-as.factor(clientCat_ET$voiture_2)
clientCat_EA$situation_familiale<-as.factor(clientCat_EA$situation_familiale)
clientCat_ET$situation_familiale<-as.factor(clientCat_ET$situation_familiale)
rf1 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 3)
rf2 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 5)
rf3 <- randomForest(categorie~., clientCat_EA, ntree = 500, mtry = 3)
rf4 <- randomForest(categorie~., clientCat_EA, ntree = 500, mtry = 5)
rf1_class <- predict(rf1,clientCat_ET, type="response")
print(taux_rf1 <- nrow(clientCat_ET[clientCat_ET$categorie==rf1_class,])/nrow(clientCat_ET))
print(taux_rf2 <- nrow(clientCat_ET[clientCat_ET$categorie==rf2_class,])/nrow(clientCat_ET))
print(taux_rf3 <- nrow(clientCat_ET[clientCat_ET$categorie==rf3_class,])/nrow(clientCat_ET))
print(taux_rf4 <- nrow(clientCat_ET[clientCat_ET$categorie==rf4_class,])/nrow(clientCat_ET))
knn1 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 1)
clientCat_EA$sexe<-as.factor(clientCat_EA$sexe)
clientCat_ET$sexe<-as.factor(clientCat_ET$sexe)
clientCat_EA$situation_familiale<-as.factor(clientCat_EA$situation_familiale)
clientCat_ET$situation_familiale<-as.factor(clientCat_ET$situation_familiale)
clientCat_EA$voiture_2<-as.factor(clientCat_EA$voiture_2)
clientCat_ET$voiture_2<-as.factor(clientCat_ET$voiture_2)
rf1 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 3)
rf1_class <- predict(rf1,clientCat_ET, type="response")
View(clientCat_ET)
levels(clientCat_ET$situation_familiale=c('-1','F','M',"N/D"))
levels(clientCat_ET$situation_familiale<-c('-1','F','M',"N/D"))
levels(clientCat_ET$situation_familiale<-c('F','M',"N/D"))
levels(clientCat_ET$situation_familiale<-c('F','M',"N/D"))
View(clientCat_ET)
levels(clientCat_ET$situation_familiale<-c('-1','F','M',"N/D"))
View(clientCat_ET)
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
plot(tree_rp1)
text(tree_rp1, pretty = 0)
test_rp1 <- predict(tree_rp1, clientCat_ET, type="class")
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
test_rp1 <- predict(tree_rp1, clientCat_ET, type="class")
clientCat_EA$sexe<-as.string(clientCat_EA$sexe)
clientCat_EA$sexe<-as.character(clientCat_EA$sexe)
clientCat_ET$sexe<-as.character(clientCat_ET$sexe)
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
test_rp1 <- predict(tree_rp1, clientCat_ET, type="class")
clientCat_EA$voiture_2<-as.as.character(clientCat_EA$voiture_2)
clientCat_EA$situation_familiale<-as.character(clientCat_EA$situation_familiale)
clientCat_ET$situation_familiale<-as.character(clientCat_ET$situation_familiale)
clientCat_EA$voiture_2<-as.character(clientCat_EA$voiture_2)
clientCat_ET$voiture_2<-as.character(clientCat_ET$voiture_2)
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
test_rp1 <- predict(tree_rp1, clientCat_ET, type="class")
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
test_rp1 <- predict(tree_rp1, clientCat_ET, type="class")
clientCat <- clientImmat[,!names(clientImmat) %in%
c("id","immatriculation", "marque", "nom","puissance","longueur","nbplaces","nbportes","couleur","occasion","prix")]
clientCat$situation_familiale<-as.factor(clientCat$situation_familiale)
clientCat$situation_familiale<-as.factor(clientCat$situation_familiale)
clientCat$voiture_2<-as.factor(clientCat$voiture_2)
clientCat$voiture_2<-as.factor(clientCat$voiture_2)
clientCat$categorie<-as.factor(clientCat$categorie)
clientCat$categorie<-as.factor(clientCat$categorie)
# arbre de décision
clientCat_EA <- clientCat[1:1400,]
clientCat_ET <- clientCat[1401:2000,]
? rpart()
# Selection d'attribut par Coefficient de Gini et effectif minimal d'un noeud de 10
tree_rp1 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 10))
plot(tree_rp1)
text(tree_rp1, pretty = 0)
# Selection d'attribut par Coefficient de Gini et effectif minimal d'un noeud de 5
tree_rp2 <- rpart(categorie~., clientCat_EA, parms = list(split = "gini"), control = rpart.control(minbucket = 5))
plot(tree_rp2)
text(tree_rp2, pretty = 0)
# Selection d'attribut par Information Gain et effectif minimal d'un noeud de 10
tree_rp3 <- rpart(categorie~., clientCat_EA, parms = list(split = "information"), control = rpart.control(minbucket = 10))
plot(tree_rp3)
text(tree_rp3, pretty = 0)
# Selection d'attribut par Information Gain et effectif minimal d'un noeud de 5
tree_rp4 <- rpart(Produit~., produit_EA, parms = list(split = "information"), control = rpart.control(minbucket = 5))
# Application de tree_rp1 (identique a tree_rp2) a l'ensemble de test
test_rp1 <- predict(tree_rp1, clientCat_ET, type="class")
# Calcul du taux de succes : nombre de succes sur nombre total d'exemples de test
print(taux_rp1 <- nrow(clientCat_ET[clientCat_ET$categorie==test_rp1,])/nrow(clientCat_ET))
# Application de tree3 (identique a tree_rp4) a l'ensemble de test
test_rp3 <- predict(tree_rp3, clientCat_ET, type="class")
# Calcul du taux de succes : nombre de succes sur nombre total d'exemples de test
print(taux_rp3 <- nrow(clientCat_ET[clientCat_ET$categorie==test_rp3,])/nrow(clientCat_ET))
tree_C51 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = T))
plot(tree_C51, type="simple")
# Apprentissage 2nd parametrage pour C5.0
tree_C52 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = F))
plot(tree_C52, type="simple")
# Apprentissage 3eme parametrage pour C5.0
tree_C53 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = T))
plot(tree_C53, type="simple")
# Apprentissage 4eme param�parametrage pour C5.0
tree_C54 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = F))
plot(tree_C54, type="simple")
# Test et taux de succes pour le 1er param�trage pour C5.0()
test_C51 <- predict(tree_C51, clientCat_ET, type="class")
print(taux_C51 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C51,])/nrow(clientCat_ET))
# Test et taux de succes pour le 2nd param�trage pour C5.0()
test_C52 <- predict(tree_C52, clientCat_ET, type="class")
print(taux_C52 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C52,])/nrow(clientCat_ET))
# Test et taux de succes pour le 3eme param�trage pour C5.0()
test_C53 <- predict(tree_C53, clientCat_ET, type="class")
print(taux_C53 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C53,])/nrow(clientCat_ET))
# Test et taux de succes pour le 4eme param�trage pour C5.0()
test_C54 <- predict(tree_C54, clientCat_ET, type="class")
print(taux_C54 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C54,])/nrow(clientCat_ET))
# Test et taux de succes pour le 4eme param�trage pour C5.0()
test_C54 <- predict(tree_C54, clientCat_ET, type="class")
print(taux_C54 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C54,])/nrow(clientCat_ET))
# Test et taux de succes pour le 3eme param�trage pour C5.0()
test_C53 <- predict(tree_C53, clientCat_ET, type="class")
print(taux_C53 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C53,])/nrow(clientCat_ET))
# Test et taux de succes pour le 2nd param�trage pour C5.0()
test_C52 <- predict(tree_C52, clientCat_ET, type="class")
print(taux_C52 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C52,])/nrow(clientCat_ET))
# Test et taux de succes pour le 1er param�trage pour C5.0()
test_C51 <- predict(tree_C51, clientCat_ET, type="class")
print(taux_C51 <- nrow(clientCat_ET[clientCat_ET$categorie==test_C51,])/nrow(clientCat_ET))
# Apprentissage 1er parametrage pour C5.0
tree_C51 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = T))
plot(tree_C51, type="simple")
# Apprentissage 2nd parametrage pour C5.0
tree_C52 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = F))
plot(tree_C52, type="simple")
# Apprentissage 1er parametrage pour C5.0
tree_C51 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 10, noGlobalPruning = T))
plot(tree_C51, type="simple")
# Apprentissage 3eme parametrage pour C5.0
tree_C53 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = T))
plot(tree_C53, type="simple")
# Apprentissage 4eme param�parametrage pour C5.0
tree_C54 <- C5.0(categorie~., clientCat_EA, control = C5.0Control(minCases = 5, noGlobalPruning = F))
plot(tree_C54, type="simple")
print(taux_rf1 <- nrow(clientCat_ET[clientCat_ET$categorie==rf1_class,])/nrow(clientCat_ET))
print(taux_rf2 <- nrow(clientCat_ET[clientCat_ET$categorie==rf2_class,])/nrow(clientCat_ET))
print(taux_rf3 <- nrow(clientCat_ET[clientCat_ET$categorie==rf3_class,])/nrow(clientCat_ET))
print(taux_rf4 <- nrow(clientCat_ET[clientCat_ET$categorie==rf4_class,])/nrow(clientCat_ET))
# Apprentissage des classifeurs
rf1 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 3)
rf2 <- randomForest(categorie~., clientCat_EA, ntree = 300, mtry = 5)
rf3 <- randomForest(categorie~., clientCat_EA, ntree = 500, mtry = 3)
rf4 <- randomForest(categorie~., clientCat_EA, ntree = 500, mtry = 5)
# Test des classifeurs
rf1_class <- predict(rf1,clientCat_ET, type="response")
rf2_class <- predict(rf2,clientCat_ET, type="response")
rf3_class <- predict(rf3,clientCat_ET, type="response")
rf4_class <- predict(rf4,clientCat_ET, type="response")
print(taux_rf1 <- nrow(clientCat_ET[clientCat_ET$categorie==rf1_class,])/nrow(clientCat_ET))
print(taux_rf2 <- nrow(clientCat_ET[clientCat_ET$categorie==rf2_class,])/nrow(clientCat_ET))
print(taux_rf3 <- nrow(clientCat_ET[clientCat_ET$categorie==rf3_class,])/nrow(clientCat_ET))
print(taux_rf4 <- nrow(clientCat_ET[clientCat_ET$categorie==rf4_class,])/nrow(clientCat_ET))
knn1 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 1)
knn2 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 2)
knn3 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 3)
knn4 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 20, distance = 1)
knn5 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 20, distance = 2)
knn6 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 20, distance = 3)
knn_auc1 <- performance(knn_pred, "auc")
? kknn()
knn1 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 1)
kknn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 1)
print(kknn(categorie~., clientCat_EA, clientCat_ET, k = 10, distance = 1))
print(taux_knn1 <- nrow(clientCat_ET[clientCat_ET$categorie==knn1$fitted.values])/nrow(clientCat_ET))
print(taux_knn1 <- nrow(clientCat_ET[clientCat_ET$categorie==knn1$fitted.values,])/nrow(clientCat_ET))
print(taux_knn1 <- nrow(clientCat_ET[clientCat_ET$categorie==knn1$fitted.values,])/nrow(clientCat_ET))
print(taux_knn2 <- nrow(clientCat_ET[clientCat_ET$categorie==knn2$fitted.values,])/nrow(clientCat_ET))
print(taux_knn3 <- nrow(clientCat_ET[clientCat_ET$categorie==knn3$fitted.values,])/nrow(clientCat_ET))
print(taux_knn4 <- nrow(clientCat_ET[clientCat_ET$categorie==knn4$fitted.values,])/nrow(clientCat_ET))
print(taux_knn1 <- nrow(clientCat_ET[clientCat_ET$categorie==knn1$fitted.values,])/nrow(clientCat_ET))
print(taux_knn2 <- nrow(clientCat_ET[clientCat_ET$categorie==knn2$fitted.values,])/nrow(clientCat_ET))
print(taux_knn3 <- nrow(clientCat_ET[clientCat_ET$categorie==knn3$fitted.values,])/nrow(clientCat_ET))
print(taux_knn4 <- nrow(clientCat_ET[clientCat_ET$categorie==knn4$fitted.values,])/nrow(clientCat_ET))
print(taux_knn5 <- nrow(clientCat_ET[clientCat_ET$categorie==knn5$fitted.values,])/nrow(clientCat_ET))
print(taux_knn6 <- nrow(clientCat_ET[clientCat_ET$categorie==knn6$fitted.values,])/nrow(clientCat_ET))
knn7 <- kknn(categorie~., clientCat_EA, clientCat_ET, k = 3, distance = 2)
print(taux_knn7 <- nrow(clientCat_ET[clientCat_ET$categorie==knn6$fitted.values,])/nrow(clientCat_ET))
install.packages("nnet")
library(nnet)
sink('output.txt', append=T)
sink('output.txt', append=T)
nn1 <- nnet(categorie~., clientCat_EA, size = 50, decay = 0.01, maxit=100)
sink(file = NULL)
nn_class1 <- predict(nn1, clientCat_ET, type="class")
print(tauxnn1 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class1,])/nrow(clientCat_ET))
print(tauxnn1 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class1,])/nrow(clientCat_ET))
# Apprentissage du classifeur
nn1 <- nnet(categorie~., clientCat_EA, size = 50, decay = 0.01, maxit=100)
nn2 <- nnet(categorie~., clientCat_EA, size = 100, decay = 0.01, maxit=100)
nn_class1 <- predict(nn1, clientCat_ET, type="class")
nn_class2 <- predict(nn2, clientCat_ET, type="class")
nn2 <- nnet(categorie~., clientCat_EA, size = 100, decay = 0.01, maxit=100)
nn2 <- nnet(categorie~., clientCat_EA, size = 70, decay = 0.01, maxit=100)
nn2 <- nnet(categorie~., clientCat_EA, size = 30, decay = 0.01, maxit=100)
nn_class2 <- predict(nn2, clientCat_ET, type="class")
print(tauxnn2 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class2,])/nrow(clientCat_ET))
nn3 <- nnet(categorie~., clientCat_EA, size = 20, decay = 0.01, maxit=100)
nn_class3 <- predict(nn3, clientCat_ET, type="class")
print(tauxnn3 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class3,])/nrow(clientCat_ET))
nn4 <- nnet(categorie~., clientCat_EA, size = 10, decay = 0.01, maxit=100)
nn_class4 <- predict(nn4, clientCat_ET, type="class")
install.packages("nnet")
print(tauxnn4 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class3,])/nrow(clientCat_ET))
nn4 <- nnet(categorie~., clientCat_EA, size = 15, decay = 0.01, maxit=100)
nn_class4 <- predict(nn4, clientCat_ET, type="class")
print(tauxnn4 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class3,])/nrow(clientCat_ET))
print(tauxnn4 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class4,])/nrow(clientCat_ET))
nn4 <- nnet(categorie~., clientCat_EA, size = 25, decay = 0.01, maxit=100)
nn_class4 <- predict(nn4, clientCat_ET, type="class")
print(tauxnn4 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class4,])/nrow(clientCat_ET))
nn5 <- nnet(categorie~., clientCat_EA, size = 20, decay = 0.001, maxit=100)
nn_class5 <- predict(nn5, clientCat_ET, type="class")
print(tauxnn5 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class5,])/nrow(clientCat_ET))
nn5 <- nnet(categorie~., clientCat_EA, size = 20, decay = 0.1, maxit=100)
nn_class5 <- predict(nn5, clientCat_ET, type="class")
print(tauxnn5 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class5,])/nrow(clientCat_ET))
nn5 <- nnet(categorie~., clientCat_EA, size = 20, decay = 0.01, maxit=300)
nn_class5 <- predict(nn5, clientCat_ET, type="class")
print(tauxnn5 <- nrow(clientCat_ET[clientCat_ET$categorie==nn_class5,])/nrow(clientCat_ET))
prob_tree1  <- predict(rpart1, marketing, type="class")
prob_tree1  <- predict(tree_rp1, marketing, type="class")
View(marketing)
marketingPredict  <- predict(tree_rp1, marketing, type="class")
marketing$predictionCategorie  <- predict(tree_rp1, marketing, type="class")
View(marketing)
plot(tree_rp1)
text(tree_rp1, pretty = 0)
View(clientImmat)
plot(tree_rp1)
text(tree_rp1, pretty = 0)
marketing$predictionCategorie  <- predict(tree_rp1, marketing, type="class")
View(marketing)
